//
// Code for the Straight Line Section
// Skeleton - print outputs
//
// Created by Bryony Gatehouse on 09/05/18.
// Copyright Â© 2018 Bryony Gatehouse. All rights reserved.
//


// if find a side route, move forwards till can't find line than turn
// if the line continues straight then it won't turn cause it won't loose the line
// if do lose line and have two options always turn left




#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/time.h>

#define CAMERA_WIDTH 320 //Control Resolution from Camera
#define CAMERA_HEIGHT 240 //Control Resolution from Camera
unsigned char pixels_buf[CAMERA_WIDTH*CAMERA_HEIGHT*4];

// returns color component (color==0 -red,color==1-green,color==2-blue
// color == 3 - luminocity
// for pixel located at (row,column)
unsigned char get_pixel( int row,int col, int color)
{
    // calculate address in 1D array of pixels
    int address = CAMERA_WIDTH*row*3 + col*3;
    if ((row < 0 ) || (row > CAMERA_HEIGHT) )
    {
        printf("row is out of range\n");
        return -1;
    }
    if ( (col< 0) || (col > CAMERA_WIDTH))
    {
        printf("column is out of range\n");
        return -1;
    }
    if (color==0)
    {
        return (pixels_buf[address]);
    }
    if (color==1)
    {
        return (pixels_buf[address + 1]);
    }
    if (color==2)
    {
        return (pixels_buf[address + 2]);
    }
    if (color==3)
    {
        unsigned char y = (pixels_buf[address] + pixels_buf[address+1] +pixels_buf[address+2])/3;
        return y;
    }
    printf("Color encoding wrong: 0-red, 1-green,2-blue,3 - luminosity\n");
    return -2; //error
}

int main()
{
    init();
    struct timeval t1;
    struct timeval t2; //structure with time 
    gettimeofday(&t1,0); // mark time
    int scan_row = 120;
    int PREVl = 0;
    int PREVr = 0;
    bool lostLine = false;
while (true) {
        int take_picture();
        int max = 0;
        int min = 225;
        for (int i = 0; i < 320, i++){  
             int pix = get_pixel(scan_row,i,3);
             if (pix > max) {
                  max = pix;
             }
             if (pix < min) {
                  min = pix;
             }
        }
        int diff = max-min;
        if (diff < 50) {
            lostLine = true;
        }
if (lostLine){
    	set_motor(1, -PREVl);
	set_motor(2, -PREVr);
}
else {   
        int thr = (max-min)/2;
        int whi[320];
        for (int i = 0; i <320;i++)
    {
	whi[i]= 100 ;
 	int pix = get_pixel(scan_row,i,3);
	if ( pix > thr)
	{
	      whi[i] = 200;
	}
    }
    
    int white;
    for (int i = 0; i<320; i++)
    {
        if (whi[i]==200)
        {
            white++;
        }
    }
    
    int left = 0;
    for (int i = 0; i <160; i++)
    {
        left = left + whi[i] * (i-160);
    }
    
    int right = 0;
    for (int i = 160; i <320; i++)
    {
        right = right + whi[i] * (i-159);
    }
    
    unsigned char v_go = 40; //change
    
    int error = (left + right)/white;
    
    gettimeofday(&t2,0); // mark time now
    long elapsed = (t2.tv_sec - t1.tv_sec)*1000000+(t2.tv_usec-t1.tv_u);
    
    if (left > 12880){
    	while(TurnCornerOne()==0){
		set_motor(1, 20);
		set_motor(2, 20);
	}
	if (TurnCornerOne()==2){
		while(turnCornerTwo()==0){
			set_motor(1, 20);
			set_motor(2, 40);
		}
	}
    }
    
    int de = error - e0;
    int t1 = t0;
    int dt = t0 - t1;
    int Kd = -0.05;
    
    double Kp = -0.005;
    unsigned char dv = error * Kp + de/dt * Kd;
    double v_left = v_go + dv;
    double v_right = v_go - dv;
    if (v_right>255){
        v_right = 255;
    }
    if (v_left>255){
        v_left = 255;
    }
    set_motor(0, v_left);
    set_motor(1, v_right);
    e0 = ness;
    t0 = t1;
    sleep1(0, 500);
}
}
	return 0;
}

int TurnCornerOne(){
	int take_picture();
        int max = 0;
        int min = 225;
        for (int i = 0; i < 320, i++){  
             int pix = get_pixel(scan_row,i,3);
             if (pix > max) {
                  max = pix;
             }
             if (pix < min) {
                  min = pix;
             }
        }
        int diff = max-min;
	if (diff<50) {return 2;}
	int left = 0;
    	for (int i = 0; i <160; i++)
   	{
        	left = left + whi[i] * (i-160);
    	}
	if (left <3200){
		return 1;
	}
	return 0;
}

int turnCornerTwo(){
	int take_picture();
	int max = 0;
        int min = 225;
        for (int i = 0; i < 320, i++){  
             int pix = get_pixel(scan_row,i,3);
             if (pix > max) {
                  max = pix;
             }
             if (pix < min) {
                  min = pix;
             }
        }
        int diff = max-min;
	int white;
    	for (int i = 0; i<320; i++)
    	{
      		if (whi[i]==200)
        	{
           		white++;
        	}
    	}
    	int left = 0;
    	for (int i = 0; i <160; i++)
    	{
        	left = left + whi[i] * (i-160);
    	}
    	int right = 0;
    	for (int i = 160; i <320; i++)
    	{
        	right = right + whi[i] * (i-159);
   	}
    	int error = (left + right)/white;
	if (error>-50 && error<50){ return 1;}
	return 0;
}
